/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  MockUniswapV3Router,
  MockUniswapV3RouterInterface,
} from "../../../../contracts/mocks/MockUniswap.sol/MockUniswapV3Router";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "SafeERC20FailedOperation",
    type: "error",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "tokenIn",
            type: "address",
          },
          {
            internalType: "address",
            name: "tokenOut",
            type: "address",
          },
          {
            internalType: "uint24",
            name: "fee",
            type: "uint24",
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountIn",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountOutMinimum",
            type: "uint256",
          },
          {
            internalType: "uint160",
            name: "sqrtPriceLimitX96",
            type: "uint160",
          },
        ],
        internalType: "struct MockUniswapV3Router.ExactInputSingleParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "exactInputSingle",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "exchangeRates",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenIn",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenOut",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "rate",
        type: "uint256",
      },
    ],
    name: "setExchangeRate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061070d806100206000396000f3fe6080604052600436106100385760003560e01c8063414bf38914610044578063503fa44f14610069578063782aaeea1461009e57600080fd5b3661003f57005b600080fd5b6100576100523660046105b6565b6100e5565b60405190815260200160405180910390f35b34801561007557600080fd5b506100576100843660046105e0565b600060208181529281526040808220909352908152205481565b3480156100aa57600080fd5b506100e36100b9366004610613565b6001600160a01b039283166000908152602081815260408083209490951682529290925291902055565b005b600081608001354211156101365760405162461bcd60e51b8152602060048201526013602482015272151c985b9cd858dd1a5bdb881d1bdbc81bdb19606a1b60448201526064015b60405180910390fd5b6000610145602084018461064f565b6001600160a01b031603610220578160a00135341461019d5760405162461bcd60e51b8152602060048201526014602482015273125b98dbdc9c9958dd0811551208185b5bdd5b9d60621b604482015260640161012d565b670de0b6b3a76400006000806101b6602086018661064f565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008460200160208101906101eb919061064f565b6001600160a01b0316815260208101919091526040016000205461020f9034610671565b610219919061069c565b90506102e9565b610248333060a0850135610237602087018761064f565b6001600160a01b03169291906104a2565b60008080610259602086018661064f565b6001600160a01b03166001600160a01b03168152602001908152602001600020600084602001602081019061028e919061064f565b6001600160a01b03166001600160a01b03168152602001908152602001600020549050806000036102c45750670de0b6b3a76400005b670de0b6b3a76400006102db8260a0860135610671565b6102e5919061069c565b9150505b8160c0013581101561033d5760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e74206f757470757420616d6f756e74000000000000604482015260640161012d565b600061034f604084016020850161064f565b6001600160a01b0316036103ab5761036d608083016060840161064f565b6001600160a01b03166108fc829081150290604051600060405180830381858888f193505050501580156103a5573d6000803e3d6000fd5b50919050565b60006103bd604084016020850161064f565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610407573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042b91906106be565b9050828110156104765760405162461bcd60e51b8152602060048201526016602482015275496e73756666696369656e74206c697175696469747960501b604482015260640161012d565b61049a610489608086016060870161064f565b6001600160a01b038416908561050f565b50505b919050565b6040516001600160a01b0384811660248301528381166044830152606482018390526105099186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050610545565b50505050565b6040516001600160a01b0383811660248301526044820183905261054091859182169063a9059cbb906064016104d7565b505050565b600080602060008451602086016000885af180610568576040513d6000823e3d81fd5b50506000513d9150811561058057806001141561058d565b6001600160a01b0384163b155b1561050957604051635274afe760e01b81526001600160a01b038516600482015260240161012d565b600061010082840312156103a557600080fd5b80356001600160a01b038116811461049d57600080fd5b600080604083850312156105f357600080fd5b6105fc836105c9565b915061060a602084016105c9565b90509250929050565b60008060006060848603121561062857600080fd5b610631846105c9565b925061063f602085016105c9565b9150604084013590509250925092565b60006020828403121561066157600080fd5b61066a826105c9565b9392505050565b808202811582820484141761069657634e487b7160e01b600052601160045260246000fd5b92915050565b6000826106b957634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156106d057600080fd5b505191905056fea26469706673582212204d0de0c9dcfe60735f4498a57cf0a9beb0fcf8b45e97c764d4fd4946fab232f764736f6c63430008180033";

type MockUniswapV3RouterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockUniswapV3RouterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockUniswapV3Router__factory extends ContractFactory {
  constructor(...args: MockUniswapV3RouterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockUniswapV3Router & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): MockUniswapV3Router__factory {
    return super.connect(runner) as MockUniswapV3Router__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockUniswapV3RouterInterface {
    return new Interface(_abi) as MockUniswapV3RouterInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockUniswapV3Router {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as MockUniswapV3Router;
  }
}
