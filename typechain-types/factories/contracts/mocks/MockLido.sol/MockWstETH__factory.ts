/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  MockWstETH,
  MockWstETHInterface,
} from "../../../../contracts/mocks/MockLido.sol/MockWstETH";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_stETH",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC20InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC20InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSpender",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_wstETHAmount",
        type: "uint256",
      },
    ],
    name: "getStETHByWstETH",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_stETHAmount",
        type: "uint256",
      },
    ],
    name: "getWstETHByStETH",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "stETH",
    outputs: [
      {
        internalType: "contract MockLido",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "stEthPerToken",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokensPerStEth",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_wstETHAmount",
        type: "uint256",
      },
    ],
    name: "unwrap",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_stETHAmount",
        type: "uint256",
      },
    ],
    name: "wrap",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a06040523480156200001157600080fd5b5060405162000d9e38038062000d9e8339810160408190526200003491620000be565b6040518060400160405280601f81526020017f57726170706564206c6971756964207374616b656420457468657220322e3000815250604051806040016040528060068152602001650eee6e88aa8960d31b81525081600390816200009a919062000197565b506004620000a9828262000197565b5050506001600160a01b031660805262000263565b600060208284031215620000d157600080fd5b81516001600160a01b0381168114620000e957600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200011b57607f821691505b6020821081036200013c57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000192576000816000526020600020601f850160051c810160208610156200016d5750805b601f850160051c820191505b818110156200018e5782815560010162000179565b5050505b505050565b81516001600160401b03811115620001b357620001b3620000f0565b620001cb81620001c4845462000106565b8462000142565b602080601f831160018114620002035760008415620001ea5750858301515b600019600386901b1c1916600185901b1785556200018e565b600085815260208120601f198616915b82811015620002345788860151825594840194600190910190840162000213565b5085821015620002535787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b608051610b116200028d600039600081816101de01528181610450015261053f0152610b116000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806395d89b4111610097578063c1fe3e4811610066578063c1fe3e48146101d9578063dd62ed3e14610218578063de0e9a3e14610251578063ea598cb01461026457600080fd5b806395d89b41146101ad578063a9059cbb146101b5578063b0e38900146101c8578063bb2952fc146101c857600080fd5b806323b872dd116100d357806323b872dd14610162578063313ce5671461017557806370a08231146101845780639576a0c81461010557600080fd5b8063035faf821461010557806306fdde0314610122578063095ea7b31461013757806318160ddd1461015a575b600080fd5b670de0b6b3a76400005b6040519081526020015b60405180910390f35b61012a610277565b604051610119919061091f565b61014a61014536600461098a565b610309565b6040519015158152602001610119565b60025461010f565b61014a6101703660046109b4565b610323565b60405160128152602001610119565b61010f6101923660046109f0565b6001600160a01b031660009081526020819052604090205490565b61012a610347565b61014a6101c336600461098a565b610356565b61010f6101d6366004610a12565b90565b6102007f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610119565b61010f610226366004610a2b565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b61010f61025f366004610a12565b610364565b61010f610272366004610a12565b6104cc565b60606003805461028690610a5e565b80601f01602080910402602001604051908101604052809291908181526020018280546102b290610a5e565b80156102ff5780601f106102d4576101008083540402835291602001916102ff565b820191906000526020600020905b8154815290600101906020018083116102e257829003601f168201915b5050505050905090565b6000336103178185856105c0565b60019150505b92915050565b6000336103318582856105d2565b61033c858585610651565b506001949350505050565b60606004805461028690610a5e565b600033610317818585610651565b60008082116103c95760405162461bcd60e51b815260206004820152602660248201527f7773744554483a207a65726f20616d6f756e7420756e77726170206e6f7420616044820152651b1b1bddd95960d21b60648201526084015b60405180910390fd5b336000908152602081905260409020548211156104285760405162461bcd60e51b815260206004820152601960248201527f7773744554483a206e6f7420656e6f756768207773744554480000000000000060448201526064016103c0565b61043233836106b0565b60405163a9059cbb60e01b81523360048201526024810183905282907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb906044016020604051808303816000875af11580156104a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c59190610a98565b5092915050565b600080821161051d5760405162461bcd60e51b815260206004820152601d60248201527f7773744554483a2063616e27742077726170207a65726f20737445544800000060448201526064016103c0565b6040516323b872dd60e01b8152336004820152306024820152604481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af1158015610590573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b49190610a98565b508161031d33826106ea565b6105cd8383836001610720565b505050565b6001600160a01b0383811660009081526001602090815260408083209386168352929052205460001981101561064b578181101561063c57604051637dc7a0d960e11b81526001600160a01b038416600482015260248101829052604481018390526064016103c0565b61064b84848484036000610720565b50505050565b6001600160a01b03831661067b57604051634b637e8f60e11b8152600060048201526024016103c0565b6001600160a01b0382166106a55760405163ec442f0560e01b8152600060048201526024016103c0565b6105cd8383836107f5565b6001600160a01b0382166106da57604051634b637e8f60e11b8152600060048201526024016103c0565b6106e6826000836107f5565b5050565b6001600160a01b0382166107145760405163ec442f0560e01b8152600060048201526024016103c0565b6106e6600083836107f5565b6001600160a01b03841661074a5760405163e602df0560e01b8152600060048201526024016103c0565b6001600160a01b03831661077457604051634a1406b160e11b8152600060048201526024016103c0565b6001600160a01b038085166000908152600160209081526040808320938716835292905220829055801561064b57826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516107e791815260200190565b60405180910390a350505050565b6001600160a01b0383166108205780600260008282546108159190610aba565b909155506108929050565b6001600160a01b038316600090815260208190526040902054818110156108735760405163391434e360e21b81526001600160a01b038516600482015260248101829052604481018390526064016103c0565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b0382166108ae576002805482900390556108cd565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161091291815260200190565b60405180910390a3505050565b60006020808352835180602085015260005b8181101561094d57858101830151858201604001528201610931565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b038116811461098557600080fd5b919050565b6000806040838503121561099d57600080fd5b6109a68361096e565b946020939093013593505050565b6000806000606084860312156109c957600080fd5b6109d28461096e565b92506109e06020850161096e565b9150604084013590509250925092565b600060208284031215610a0257600080fd5b610a0b8261096e565b9392505050565b600060208284031215610a2457600080fd5b5035919050565b60008060408385031215610a3e57600080fd5b610a478361096e565b9150610a556020840161096e565b90509250929050565b600181811c90821680610a7257607f821691505b602082108103610a9257634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215610aaa57600080fd5b81518015158114610a0b57600080fd5b8082018082111561031d57634e487b7160e01b600052601160045260246000fdfea26469706673582212205a7c34766aae1621c6e6348b3c2762ecc06616655597df9dd05d2983a5d6fa9264736f6c63430008180033";

type MockWstETHConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockWstETHConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockWstETH__factory extends ContractFactory {
  constructor(...args: MockWstETHConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _stETH: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_stETH, overrides || {});
  }
  override deploy(
    _stETH: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_stETH, overrides || {}) as Promise<
      MockWstETH & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockWstETH__factory {
    return super.connect(runner) as MockWstETH__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockWstETHInterface {
    return new Interface(_abi) as MockWstETHInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): MockWstETH {
    return new Contract(address, _abi, runner) as unknown as MockWstETH;
  }
}
