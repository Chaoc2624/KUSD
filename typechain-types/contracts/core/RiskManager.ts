/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface RiskManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "RISK_ADMIN_ROLE"
      | "checkCollateralSupply"
      | "getRoleAdmin"
      | "getTokenRiskParams"
      | "getWeights"
      | "grantRole"
      | "hasRole"
      | "isValidRiskProfile"
      | "renounceRole"
      | "revokeRole"
      | "riskProfiles"
      | "setRiskProfile"
      | "setTokenRisk"
      | "supportsInterface"
      | "tokenRisk"
      | "updateSupply"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "RiskProfileUpdated"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "TokenRiskUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RISK_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkCollateralSupply",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenRiskParams",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getWeights",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidRiskProfile",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "riskProfiles",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRiskProfile",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenRisk",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenRisk",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSupply",
    values: [AddressLike, BigNumberish, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RISK_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkCollateralSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenRiskParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getWeights", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidRiskProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "riskProfiles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRiskProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenRisk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenRisk", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateSupply",
    data: BytesLike
  ): Result;
}

export namespace RiskProfileUpdatedEvent {
  export type InputTuple = [
    profileId: BigNumberish,
    rwaWeight: BigNumberish,
    lstWeight: BigNumberish,
    defiWeight: BigNumberish,
    optionsWeight: BigNumberish
  ];
  export type OutputTuple = [
    profileId: bigint,
    rwaWeight: bigint,
    lstWeight: bigint,
    defiWeight: bigint,
    optionsWeight: bigint
  ];
  export interface OutputObject {
    profileId: bigint;
    rwaWeight: bigint;
    lstWeight: bigint;
    defiWeight: bigint;
    optionsWeight: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenRiskUpdatedEvent {
  export type InputTuple = [
    token: AddressLike,
    maxLTV: BigNumberish,
    liquidationLTV: BigNumberish,
    liquidationBonus: BigNumberish,
    maxSupply: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    maxLTV: bigint,
    liquidationLTV: bigint,
    liquidationBonus: bigint,
    maxSupply: bigint
  ];
  export interface OutputObject {
    token: string;
    maxLTV: bigint;
    liquidationLTV: bigint;
    liquidationBonus: bigint;
    maxSupply: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RiskManager extends BaseContract {
  connect(runner?: ContractRunner | null): RiskManager;
  waitForDeployment(): Promise<this>;

  interface: RiskManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  RISK_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  checkCollateralSupply: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getTokenRiskParams: TypedContractMethod<
    [token: AddressLike],
    [
      [bigint, bigint, bigint] & {
        maxLTV: bigint;
        liquidationLTV: bigint;
        liquidationBonus: bigint;
      }
    ],
    "view"
  >;

  getWeights: TypedContractMethod<
    [profileId: BigNumberish],
    [[bigint, bigint, bigint, bigint]],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isValidRiskProfile: TypedContractMethod<
    [profileId: BigNumberish],
    [boolean],
    "view"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  riskProfiles: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, boolean] & {
        rwaWeight: bigint;
        lstWeight: bigint;
        defiWeight: bigint;
        optionsWeight: bigint;
        maxAllocation: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  setRiskProfile: TypedContractMethod<
    [
      profileId: BigNumberish,
      rwaWeight: BigNumberish,
      lstWeight: BigNumberish,
      defiWeight: BigNumberish,
      optionsWeight: BigNumberish,
      maxAllocation: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setTokenRisk: TypedContractMethod<
    [
      token: AddressLike,
      maxLTV: BigNumberish,
      liquidationLTV: BigNumberish,
      liquidationBonus: BigNumberish,
      maxSupply: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  tokenRisk: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, boolean] & {
        maxLTV: bigint;
        liquidationLTV: bigint;
        liquidationBonus: bigint;
        maxSupply: bigint;
        currentSupply: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  updateSupply: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, increase: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "RISK_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "checkCollateralSupply"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getTokenRiskParams"
  ): TypedContractMethod<
    [token: AddressLike],
    [
      [bigint, bigint, bigint] & {
        maxLTV: bigint;
        liquidationLTV: bigint;
        liquidationBonus: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getWeights"
  ): TypedContractMethod<
    [profileId: BigNumberish],
    [[bigint, bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isValidRiskProfile"
  ): TypedContractMethod<[profileId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "riskProfiles"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, boolean] & {
        rwaWeight: bigint;
        lstWeight: bigint;
        defiWeight: bigint;
        optionsWeight: bigint;
        maxAllocation: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "setRiskProfile"
  ): TypedContractMethod<
    [
      profileId: BigNumberish,
      rwaWeight: BigNumberish,
      lstWeight: BigNumberish,
      defiWeight: BigNumberish,
      optionsWeight: BigNumberish,
      maxAllocation: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTokenRisk"
  ): TypedContractMethod<
    [
      token: AddressLike,
      maxLTV: BigNumberish,
      liquidationLTV: BigNumberish,
      liquidationBonus: BigNumberish,
      maxSupply: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "tokenRisk"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, boolean] & {
        maxLTV: bigint;
        liquidationLTV: bigint;
        liquidationBonus: bigint;
        maxSupply: bigint;
        currentSupply: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "updateSupply"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, increase: boolean],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "RiskProfileUpdated"
  ): TypedContractEvent<
    RiskProfileUpdatedEvent.InputTuple,
    RiskProfileUpdatedEvent.OutputTuple,
    RiskProfileUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "TokenRiskUpdated"
  ): TypedContractEvent<
    TokenRiskUpdatedEvent.InputTuple,
    TokenRiskUpdatedEvent.OutputTuple,
    TokenRiskUpdatedEvent.OutputObject
  >;

  filters: {
    "RiskProfileUpdated(uint8,uint256,uint256,uint256,uint256)": TypedContractEvent<
      RiskProfileUpdatedEvent.InputTuple,
      RiskProfileUpdatedEvent.OutputTuple,
      RiskProfileUpdatedEvent.OutputObject
    >;
    RiskProfileUpdated: TypedContractEvent<
      RiskProfileUpdatedEvent.InputTuple,
      RiskProfileUpdatedEvent.OutputTuple,
      RiskProfileUpdatedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "TokenRiskUpdated(address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      TokenRiskUpdatedEvent.InputTuple,
      TokenRiskUpdatedEvent.OutputTuple,
      TokenRiskUpdatedEvent.OutputObject
    >;
    TokenRiskUpdated: TypedContractEvent<
      TokenRiskUpdatedEvent.InputTuple,
      TokenRiskUpdatedEvent.OutputTuple,
      TokenRiskUpdatedEvent.OutputObject
    >;
  };
}
