{
  "version": "3.4",
  "log": [
    {
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:51",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)26_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(AccessControlStorage)36_storage": {
              "label": "struct AccessControlUpgradeable.AccessControlStorage",
              "members": [
                {
                  "label": "_roles",
                  "type": "t_mapping(t_bytes32,t_struct(RoleData)26_storage)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)147_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)26_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)26_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:62",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)147_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils"
        ],
        "methods": [
          "proxiableUUID()",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)147_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:30",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)296_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)147_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)147_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)147_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)491_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)147_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/access/AccessControl.sol:AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:49",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)1700_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1700_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)1700_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/interfaces/IERC1363.sol:IERC1363": {
        "src": "@openzeppelin/contracts/interfaces/IERC1363.sol:16",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "transferAndCall(address,uint256)",
          "transferAndCall(address,uint256,bytes)",
          "transferFromAndCall(address,address,uint256)",
          "transferFromAndCall(address,address,uint256,bytes)",
          "approveAndCall(address,uint256)",
          "approveAndCall(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts/interfaces/IERC1967.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:15",
        "version": {
          "withMetadata": "6f9fb672a6beaf4edbf1cffa871cd8f8b8083af565c30f4c409a3f51da8d8fcb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot",
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:29",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:18",
        "version": {
          "withMetadata": "4db50e717c4b4db8f20a61538452bb6adfd7a4a89802df58d77b2092417b4e68",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:11",
        "version": {
          "withMetadata": "18c70465e123f75e54341a45fa65fe0ab2bfb53f38032de58cc9b46b4628ddfc",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Errors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/Errors.sol:Errors": {
        "src": "@openzeppelin/contracts/utils/Errors.sol:14",
        "version": {
          "withMetadata": "0da248dbea3cc23354b7623fa647cfb838cf5bb9520b7548dddd3e91b3268c73",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/Panic.sol:Panic": {
        "src": "@openzeppelin/contracts/utils/Panic.sol:26",
        "version": {
          "withMetadata": "458e9930efa6473397466cc6dd5eabc3a771af23b183f8ad211d6ccedb78bb9a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/Pausable.sol:Pausable": {
        "src": "@openzeppelin/contracts/utils/Pausable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_paused",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/utils/Pausable.sol:18"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:25",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:47"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "79641f176ac11b6466288ea4ecc850a867515a823a3e1d304c85e150f9af68a6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:13",
        "version": {
          "withMetadata": "93f0f9720860134fa5276730670a13a71d596eaf3e6950b75d519910b645386e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:12",
        "version": {
          "withMetadata": "76ae13392f38f8feb1936e3e7fff18443533dc6abd4b7cbf30f545a1b60539a5",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:MessageHashUtils": {
        "src": "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:15",
        "version": {
          "withMetadata": "22162b0654e6333f5fd282c096926e318ce4da2cc988217c4e9dc1e52157cb91",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:12",
        "version": {
          "withMetadata": "65255a0254c8ecf28fcd2e819a50f8afc9b7a2bef5f30b4a4ec1b623d18f2506",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/Panic.sol:Panic"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "018f4de5ef395b73f155618e9b9aef42b80f0a0d10bec42a225cd53569fe1106",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:11",
        "version": {
          "withMetadata": "b32452cdd009967970c7c2c71de7ff4bb231c467116aeb522dbe3c6e04e1a31a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "contracts/adapters/lido/LidoAdapter.sol:ILido": {
        "src": "contracts/adapters/lido/LidoAdapter.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "submit(address)",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "contracts/adapters/lido/LidoAdapter.sol:IUniswapV3Router": {
        "src": "contracts/adapters/lido/LidoAdapter.sol:33",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "contracts/adapters/lido/LidoAdapter.sol:IWETH": {
        "src": "contracts/adapters/lido/LidoAdapter.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)",
          "balanceOf(address)",
          "transfer(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "contracts/adapters/lido/LidoAdapter.sol:IWstETH": {
        "src": "contracts/adapters/lido/LidoAdapter.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [
          "wrap(uint256)",
          "unwrap(uint256)",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "getStETHByWstETH(uint256)",
          "getWstETHByStETH(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "contracts/adapters/lido/LidoAdapter.sol:LidoAdapter": {
        "src": "contracts/adapters/lido/LidoAdapter.sol:51",
        "version": {
          "withMetadata": "e5368ef955b38422e6892d97cab8aad73984a2fd9bb82c52e8369b56268169cb",
          "withoutMetadata": "624b347e74dc38da924f1ee6770f2f91ccc70ae93eb1c6512e5327fb879a6024",
          "linkedWithoutMetadata": "624b347e74dc38da924f1ee6770f2f91ccc70ae93eb1c6512e5327fb879a6024"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/AccessControl.sol:AccessControl",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "(address,address,address,address,address,address)",
          "deposit(uint256)",
          "withdraw(uint256)",
          "harvest()",
          "getBalance()",
          "emergencyWithdraw()",
          "getAPR()",
          "getTVL()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LidoAdapter",
            "src": "contracts/adapters/lido/LidoAdapter.sol:77"
          },
          {
            "kind": "state-variable-immutable",
            "name": "kusd",
            "src": "contracts/adapters/lido/LidoAdapter.sol:56"
          },
          {
            "kind": "state-variable-immutable",
            "name": "stETH",
            "src": "contracts/adapters/lido/LidoAdapter.sol:57"
          },
          {
            "kind": "state-variable-immutable",
            "name": "wstETH",
            "src": "contracts/adapters/lido/LidoAdapter.sol:58"
          },
          {
            "kind": "state-variable-immutable",
            "name": "weth",
            "src": "contracts/adapters/lido/LidoAdapter.sol:59"
          },
          {
            "kind": "state-variable-immutable",
            "name": "uniswapRouter",
            "src": "contracts/adapters/lido/LidoAdapter.sol:60"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)1700_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            },
            {
              "label": "totalStaked",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "LidoAdapter",
              "src": "contracts/adapters/lido/LidoAdapter.sol:64"
            },
            {
              "label": "totalRewards",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "LidoAdapter",
              "src": "contracts/adapters/lido/LidoAdapter.sol:65"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1700_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)1700_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "contracts/adapters/lido/LidoAdapterTestnet.sol:LidoAdapterTestnet": {
        "src": "contracts/adapters/lido/LidoAdapterTestnet.sol:14",
        "version": {
          "withMetadata": "1bd1f2611cae5e8b0faa17ec1592b880b1027f1bd67831983997687a0dbfab09",
          "withoutMetadata": "cbd9b0bd5bc45858ebd3afa9511ce3d08c99aa2040a09413bb70d31fc36def3f",
          "linkedWithoutMetadata": "cbd9b0bd5bc45858ebd3afa9511ce3d08c99aa2040a09413bb70d31fc36def3f"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/AccessControl.sol:AccessControl",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "(address,address)",
          "deposit(uint256)",
          "withdraw(uint256)",
          "harvest()",
          "getBalance()",
          "emergencyWithdraw()",
          "setAPR(uint256)",
          "getAPR()",
          "getTVL()",
          "getUserStake(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LidoAdapterTestnet",
            "src": "contracts/adapters/lido/LidoAdapterTestnet.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "kusd",
            "src": "contracts/adapters/lido/LidoAdapterTestnet.sol:19"
          },
          {
            "kind": "state-variable-assignment",
            "name": "currentAPR",
            "src": "contracts/adapters/lido/LidoAdapterTestnet.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)1700_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            },
            {
              "label": "totalStaked",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "LidoAdapterTestnet",
              "src": "contracts/adapters/lido/LidoAdapterTestnet.sol:21"
            },
            {
              "label": "totalRewards",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "LidoAdapterTestnet",
              "src": "contracts/adapters/lido/LidoAdapterTestnet.sol:22"
            },
            {
              "label": "currentAPR",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "LidoAdapterTestnet",
              "src": "contracts/adapters/lido/LidoAdapterTestnet.sol:23"
            },
            {
              "label": "lastHarvestTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LidoAdapterTestnet",
              "src": "contracts/adapters/lido/LidoAdapterTestnet.sol:24"
            },
            {
              "label": "userStakes",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LidoAdapterTestnet",
              "src": "contracts/adapters/lido/LidoAdapterTestnet.sol:26"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1700_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)1700_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "contracts/core/CollateralManager.sol:CollateralManager": {
        "src": "contracts/core/CollateralManager.sol:13",
        "version": {
          "withMetadata": "68397b1efe8c4316bf13ff7452dc823b6df6f3b154c7bb44c05a2ad135da8739",
          "withoutMetadata": "442c723e65943672a352787af21fe0be919bd61f77326aeff97586429a29d19a",
          "linkedWithoutMetadata": "442c723e65943672a352787af21fe0be919bd61f77326aeff97586429a29d19a"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/AccessControl.sol:AccessControl",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "(address,address,address,address,address)",
          "addCollateralToken(address,uint256)",
          "deposit(address,uint256)",
          "withdraw(address,uint256)",
          "borrow(uint256)",
          "repay(uint256)",
          "liquidate(address,address,uint256)",
          "getHealthFactor(address)",
          "getUserTokenBalance(address,address)",
          "setFeeRates(uint256,uint256)",
          "setInterestRate(uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "CollateralManager",
            "src": "contracts/core/CollateralManager.sol:66"
          },
          {
            "kind": "state-variable-immutable",
            "name": "oracle",
            "src": "contracts/core/CollateralManager.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "kusd",
            "src": "contracts/core/CollateralManager.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "riskManager",
            "src": "contracts/core/CollateralManager.sol:37"
          },
          {
            "kind": "state-variable-assignment",
            "name": "mintFeeRate",
            "src": "contracts/core/CollateralManager.sol:40"
          },
          {
            "kind": "state-variable-assignment",
            "name": "repayFeeRate",
            "src": "contracts/core/CollateralManager.sol:41"
          },
          {
            "kind": "state-variable-assignment",
            "name": "baseInterestRate",
            "src": "contracts/core/CollateralManager.sol:42"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)1700_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "2",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/utils/Pausable.sol:18"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_struct(Position)11033_storage)",
              "contract": "CollateralManager",
              "src": "contracts/core/CollateralManager.sol:32"
            },
            {
              "label": "collateralTokens",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_struct(CollateralToken)11040_storage)",
              "contract": "CollateralManager",
              "src": "contracts/core/CollateralManager.sol:33"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "CollateralManager",
              "src": "contracts/core/CollateralManager.sol:38"
            },
            {
              "label": "mintFeeRate",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "CollateralManager",
              "src": "contracts/core/CollateralManager.sol:40"
            },
            {
              "label": "repayFeeRate",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "CollateralManager",
              "src": "contracts/core/CollateralManager.sol:41"
            },
            {
              "label": "baseInterestRate",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "CollateralManager",
              "src": "contracts/core/CollateralManager.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(CollateralToken)11040_storage)": {
              "label": "mapping(address => struct CollateralManager.CollateralToken)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Position)11033_storage)": {
              "label": "mapping(address => struct CollateralManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1700_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(CollateralToken)11040_storage": {
              "label": "struct CollateralManager.CollateralToken",
              "members": [
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalDeposited",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "maxSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Position)11033_storage": {
              "label": "struct CollateralManager.Position",
              "members": [
                {
                  "label": "collateralValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "debt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastUpdateTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "tokenBalances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(RoleData)1700_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "contracts/core/MasterVault.sol:MasterVault": {
        "src": "contracts/core/MasterVault.sol:14",
        "version": {
          "withMetadata": "b0621de01451a70b0c60958f03ff6eae748902dac88191fc91dfa81a25f0868a",
          "withoutMetadata": "b8d294f5059dacb698c9a8d7b63cee79d32ec98b4ecdd813a3febb416424b3d0",
          "linkedWithoutMetadata": "b8d294f5059dacb698c9a8d7b63cee79d32ec98b4ecdd813a3febb416424b3d0"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/Pausable.sol:Pausable",
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/AccessControl.sol:AccessControl",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA",
          "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:MessageHashUtils"
        ],
        "methods": [
          "(address,address,address,address)",
          "setVaults(address,address,address,address)",
          "deposit(uint256,uint8)",
          "withdraw(uint256)",
          "aiRebalance((uint256,uint256,uint256,uint256,uint256,uint256),bytes)",
          "manualRebalance(uint256,uint256,uint256,uint256)",
          "harvestAll()",
          "getUserPosition(address)",
          "getTotalValueLocked()",
          "setAISigner(address)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MasterVault",
            "src": "contracts/core/MasterVault.sol:73"
          },
          {
            "kind": "state-variable-immutable",
            "name": "kusd",
            "src": "contracts/core/MasterVault.sol:22"
          },
          {
            "kind": "state-variable-immutable",
            "name": "riskManager",
            "src": "contracts/core/MasterVault.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)1700_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "2",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/utils/Pausable.sol:18"
            },
            {
              "label": "rwaVault",
              "offset": 1,
              "slot": "2",
              "type": "t_contract(IVault)15419",
              "contract": "MasterVault",
              "src": "contracts/core/MasterVault.sol:25"
            },
            {
              "label": "lstVault",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(IVault)15419",
              "contract": "MasterVault",
              "src": "contracts/core/MasterVault.sol:26"
            },
            {
              "label": "defiVault",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(IVault)15419",
              "contract": "MasterVault",
              "src": "contracts/core/MasterVault.sol:27"
            },
            {
              "label": "optionsVault",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IVault)15419",
              "contract": "MasterVault",
              "src": "contracts/core/MasterVault.sol:28"
            },
            {
              "label": "aiSigner",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "MasterVault",
              "src": "contracts/core/MasterVault.sol:30"
            },
            {
              "label": "usedSignatures",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "MasterVault",
              "src": "contracts/core/MasterVault.sol:31"
            },
            {
              "label": "userPositions",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(UserPosition)12159_storage)",
              "contract": "MasterVault",
              "src": "contracts/core/MasterVault.sol:34"
            },
            {
              "label": "rebalanceNonce",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "MasterVault",
              "src": "contracts/core/MasterVault.sol:55"
            },
            {
              "label": "totalManagedAssets",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "MasterVault",
              "src": "contracts/core/MasterVault.sol:56"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IVault)15419": {
              "label": "contract IVault",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UserPosition)12159_storage)": {
              "label": "mapping(address => struct MasterVault.UserPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1700_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)1700_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UserPosition)12159_storage": {
              "label": "struct MasterVault.UserPosition",
              "members": [
                {
                  "label": "totalDeposited",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "rwaShares",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lstShares",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "defiShares",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "optionsShares",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "riskProfile",
                  "type": "t_uint8",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "lastUpdateTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "contracts/core/OracleAdapter.sol:IAggregatorV3": {
        "src": "contracts/core/OracleAdapter.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "latestRoundData()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "contracts/core/OracleAdapter.sol:OracleAdapter": {
        "src": "contracts/core/OracleAdapter.sol:21",
        "version": {
          "withMetadata": "fd3d5f385fc9470fc0904790e109ec8b42c9d791b025985ff03c5c793f3a69fb",
          "withoutMetadata": "954dccb93af29552eeeddede09df02352685fa3c775cba56c2af873a3f3bd746",
          "linkedWithoutMetadata": "954dccb93af29552eeeddede09df02352685fa3c775cba56c2af873a3f3bd746"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/AccessControl.sol:AccessControl",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setPriceFeed(address,address,uint8,uint256)",
          "removePriceFeed(address)",
          "getPrice(address)",
          "tokenToUsd(address,uint256)",
          "usdToToken(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "OracleAdapter",
            "src": "contracts/core/OracleAdapter.sol:48"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)1700_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "1",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/utils/Pausable.sol:18"
            },
            {
              "label": "priceFeeds",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_struct(PriceFeed)13336_storage)",
              "contract": "OracleAdapter",
              "src": "contracts/core/OracleAdapter.sol:31"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IAggregatorV3)13317": {
              "label": "contract IAggregatorV3",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PriceFeed)13336_storage)": {
              "label": "mapping(address => struct OracleAdapter.PriceFeed)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1700_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(PriceFeed)13336_storage": {
              "label": "struct OracleAdapter.PriceFeed",
              "members": [
                {
                  "label": "feed",
                  "type": "t_contract(IAggregatorV3)13317",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokenDecimals",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "0"
                },
                {
                  "label": "maxStaleness",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(RoleData)1700_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "contracts/core/RiskManager.sol:RiskManager": {
        "src": "contracts/core/RiskManager.sol:6",
        "version": {
          "withMetadata": "3ad11e38c782407848263a40640773795e8e9292c7293db6b00f51ef5e499958",
          "withoutMetadata": "936b0d2ecbb10b595005b3926e30ad520173dd3b85318654d80113865567252a",
          "linkedWithoutMetadata": "936b0d2ecbb10b595005b3926e30ad520173dd3b85318654d80113865567252a"
        },
        "inherit": [
          "@openzeppelin/contracts/access/AccessControl.sol:AccessControl",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setRiskProfile(uint8,uint256,uint256,uint256,uint256,uint256)",
          "setTokenRisk(address,uint256,uint256,uint256,uint256)",
          "getWeights(uint8)",
          "isValidRiskProfile(uint8)",
          "checkCollateralSupply(address,uint256)",
          "updateSupply(address,uint256,bool)",
          "getTokenRiskParams(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RiskManager",
            "src": "contracts/core/RiskManager.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)1700_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            },
            {
              "label": "riskProfiles",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint8,t_struct(RiskProfile)13771_storage)",
              "contract": "RiskManager",
              "src": "contracts/core/RiskManager.sol:19"
            },
            {
              "label": "tokenRisk",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_struct(TokenRisk)13794_storage)",
              "contract": "RiskManager",
              "src": "contracts/core/RiskManager.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(TokenRisk)13794_storage)": {
              "label": "mapping(address => struct RiskManager.TokenRisk)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1700_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_struct(RiskProfile)13771_storage)": {
              "label": "mapping(uint8 => struct RiskManager.RiskProfile)",
              "numberOfBytes": "32"
            },
            "t_struct(RiskProfile)13771_storage": {
              "label": "struct RiskManager.RiskProfile",
              "members": [
                {
                  "label": "rwaWeight",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "lstWeight",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "defiWeight",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "optionsWeight",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "maxAllocation",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(RoleData)1700_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(TokenRisk)13794_storage": {
              "label": "struct RiskManager.TokenRisk",
              "members": [
                {
                  "label": "maxLTV",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "liquidationLTV",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "liquidationBonus",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "maxSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "contracts/core/Stablecoin.sol:Stablecoin": {
        "src": "contracts/core/Stablecoin.sol:10",
        "version": {
          "withMetadata": "dcdbf181b945281e01aa69f0eba3f12bccae401533c69a123ec6392135ab1cbf",
          "withoutMetadata": "f28aa1ea544b9b1f488301f11076c5d3bf334d593e8423a6060784d109fed1cc",
          "linkedWithoutMetadata": "f28aa1ea544b9b1f488301f11076c5d3bf334d593e8423a6060784d109fed1cc"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(string,string,address)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)26_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(AccessControlStorage)36_storage": {
              "label": "struct AccessControlUpgradeable.AccessControlStorage",
              "members": [
                {
                  "label": "_roles",
                  "type": "t_mapping(t_bytes32,t_struct(RoleData)26_storage)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)296_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)147_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)491_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)26_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)26_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:62",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.24"
      },
      "contracts/mocks/MockAggregatorV3.sol:MockAggregatorV3": {
        "src": "contracts/mocks/MockAggregatorV3.sol:4",
        "version": {
          "withMetadata": "49fd74a6284f665bc490875c1f38977fd2a1155cc90408a5a552e9a1f3195a2b",
          "withoutMetadata": "a7435d8d06b8903937f4595fa0f22f4a3322fef5d5101488a7db9745756185a2",
          "linkedWithoutMetadata": "a7435d8d06b8903937f4595fa0f22f4a3322fef5d5101488a7db9745756185a2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(uint8,int256)",
          "latestRoundData()",
          "setPrice(int256)",
          "setUpdatedAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockAggregatorV3",
            "src": "contracts/mocks/MockAggregatorV3.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "decimals",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "MockAggregatorV3",
              "src": "contracts/mocks/MockAggregatorV3.sol:5"
            },
            {
              "label": "_price",
              "offset": 0,
              "slot": "1",
              "type": "t_int256",
              "contract": "MockAggregatorV3",
              "src": "contracts/mocks/MockAggregatorV3.sol:6"
            },
            {
              "label": "_updatedAt",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "MockAggregatorV3",
              "src": "contracts/mocks/MockAggregatorV3.sol:7"
            },
            {
              "label": "_roundId",
              "offset": 0,
              "slot": "3",
              "type": "t_uint80",
              "contract": "MockAggregatorV3",
              "src": "contracts/mocks/MockAggregatorV3.sol:8"
            }
          ],
          "types": {
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "contracts/mocks/MockERC20.sol:MockERC20": {
        "src": "contracts/mocks/MockERC20.sol:6",
        "version": {
          "withMetadata": "751d02c2cd9fc24060f736dd0d564f6c14523ba7ea01238af62dcca070d4e1e5",
          "withoutMetadata": "f357f956fb048bddd42f3c8341d9a173282ccf7d5760b9b11f8b21ab25be1179",
          "linkedWithoutMetadata": "f357f956fb048bddd42f3c8341d9a173282ccf7d5760b9b11f8b21ab25be1179"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint8)",
          "decimals()",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/mocks/MockERC20.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "MockERC20",
              "src": "contracts/mocks/MockERC20.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "contracts/mocks/MockLido.sol:MockLido": {
        "src": "contracts/mocks/MockLido.sol:6",
        "version": {
          "withMetadata": "8325c84a13a1c303361036ad3e6fa0259a4e3ab41a58336793891b4be75cf747",
          "withoutMetadata": "fb39ac312a2bfae0ff5c3cc228279d7d3cabfae6e0865723b4d469ac417f0763",
          "linkedWithoutMetadata": "fb39ac312a2bfae0ff5c3cc228279d7d3cabfae6e0865723b4d469ac417f0763"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "submit(address)",
          "getPooledEthByShares(uint256)",
          "getSharesByPooledEth(uint256)",
          "rebase(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockLido",
            "src": "contracts/mocks/MockLido.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "lastRebaseTime",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "MockLido",
              "src": "contracts/mocks/MockLido.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "contracts/mocks/MockLido.sol:MockWstETH": {
        "src": "contracts/mocks/MockLido.sol:58",
        "version": {
          "withMetadata": "675d1f14fa0c56c915d9da00e2271cb0d50d281ab1b5324aa3ff002dccd02b0e",
          "withoutMetadata": "b0975c4f3db958567aa0fa6c1c456f9fe4486c496632fc0fa97298da72efced6",
          "linkedWithoutMetadata": "b0975c4f3db958567aa0fa6c1c456f9fe4486c496632fc0fa97298da72efced6"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "wrap(uint256)",
          "unwrap(uint256)",
          "getStETHByWstETH(uint256)",
          "getWstETHByStETH(uint256)",
          "stEthPerToken()",
          "tokensPerStEth()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWstETH",
            "src": "contracts/mocks/MockLido.sol:61"
          },
          {
            "kind": "state-variable-immutable",
            "name": "stETH",
            "src": "contracts/mocks/MockLido.sol:59"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "contracts/mocks/MockUniswap.sol:MockUniswapV3Router": {
        "src": "contracts/mocks/MockUniswap.sol:7",
        "version": {
          "withMetadata": "7623254e3d72dd46552eaf6c6ef1af65e8d1a8122a851b2a33aa1e4494a82a74",
          "withoutMetadata": "a2eaf7c5cc2d5db41854e2a5e1c793bca37ee18de458f84d06f8312af01835ec",
          "linkedWithoutMetadata": "a2eaf7c5cc2d5db41854e2a5e1c793bca37ee18de458f84d06f8312af01835ec"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "setExchangeRate(address,address,uint256)",
          "exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "exchangeRates",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "MockUniswapV3Router",
              "src": "contracts/mocks/MockUniswap.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "contracts/mocks/MockVault.sol:MockVault": {
        "src": "contracts/mocks/MockVault.sol:9",
        "version": {
          "withMetadata": "aec24bac1760726a30b880064df126b30500c13cfda9280b0d3e527f7cdd29f2",
          "withoutMetadata": "8ad37810cf68e5daf3a7976a52151b8107a9cb4d19228c26276a43b759c3c6e9",
          "linkedWithoutMetadata": "8ad37810cf68e5daf3a7976a52151b8107a9cb4d19228c26276a43b759c3c6e9"
        },
        "inherit": [
          "@openzeppelin/contracts/access/AccessControl.sol:AccessControl",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/vaults/IVault.sol:IVault"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "(address)",
          "deposit(address,uint256)",
          "withdraw(address,uint256)",
          "totalAssets()",
          "balanceOf(address)",
          "harvest()",
          "sharePrice()",
          "getVaultInfo()",
          "emergencyWithdraw(address)",
          "pause()",
          "unpause()",
          "setTotalAssets(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockVault",
            "src": "contracts/mocks/MockVault.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)1700_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            },
            {
              "label": "asset",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IERC20)3212",
              "contract": "MockVault",
              "src": "contracts/mocks/MockVault.sol:14"
            },
            {
              "label": "totalShares",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "MockVault",
              "src": "contracts/mocks/MockVault.sol:15"
            },
            {
              "label": "_totalAssets",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "MockVault",
              "src": "contracts/mocks/MockVault.sol:16"
            },
            {
              "label": "shares",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "MockVault",
              "src": "contracts/mocks/MockVault.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)3212": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1700_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)1700_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "contracts/vaults/IVault.sol:IVault": {
        "src": "contracts/vaults/IVault.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256)",
          "withdraw(address,uint256)",
          "totalAssets()",
          "balanceOf(address)",
          "harvest()",
          "sharePrice()",
          "getVaultInfo()",
          "emergencyWithdraw(address)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "contracts/vaults/LSTVault.sol:LSTVault": {
        "src": "contracts/vaults/LSTVault.sol:12",
        "version": {
          "withMetadata": "d80c1609495d21f3f9d7648cf5bb0d0b77cec446baf52f248e19bc4c056867f6",
          "withoutMetadata": "1e82d90aec28f665b9e5bb5f2583f06095b989f7969b1a9e71376b2092c4ee52",
          "linkedWithoutMetadata": "1e82d90aec28f665b9e5bb5f2583f06095b989f7969b1a9e71376b2092c4ee52"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/utils/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/AccessControl.sol:AccessControl",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/vaults/IVault.sol:IVault"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "(address,address payable,address)",
          "deposit(address,uint256)",
          "withdraw(address,uint256)",
          "totalAssets()",
          "balanceOf(address)",
          "harvest()",
          "sharePrice()",
          "getVaultInfo()",
          "rebalance(uint256)",
          "compoundRewards()",
          "emergencyWithdraw(address)",
          "pause()",
          "unpause()",
          "getUserShares(address)",
          "getStrategyBalances()",
          "getAPY()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LSTVault",
            "src": "contracts/vaults/LSTVault.sol:43"
          },
          {
            "kind": "state-variable-immutable",
            "name": "asset",
            "src": "contracts/vaults/LSTVault.sol:18"
          },
          {
            "kind": "state-variable-immutable",
            "name": "lidoAdapter",
            "src": "contracts/vaults/LSTVault.sol:19"
          },
          {
            "kind": "state-variable-assignment",
            "name": "lidoWeight",
            "src": "contracts/vaults/LSTVault.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)1700_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "1",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/utils/Pausable.sol:18"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            },
            {
              "label": "totalShares",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "LSTVault",
              "src": "contracts/vaults/LSTVault.sol:21"
            },
            {
              "label": "lastRebaseTime",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "LSTVault",
              "src": "contracts/vaults/LSTVault.sol:22"
            },
            {
              "label": "shares",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LSTVault",
              "src": "contracts/vaults/LSTVault.sol:24"
            },
            {
              "label": "lidoWeight",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "LSTVault",
              "src": "contracts/vaults/LSTVault.sol:27"
            },
            {
              "label": "totalRewards",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "LSTVault",
              "src": "contracts/vaults/LSTVault.sol:30"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "LSTVault",
              "src": "contracts/vaults/LSTVault.sol:31"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1700_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)1700_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "contracts/vaults/RWAVault.sol:RWAVault": {
        "src": "contracts/vaults/RWAVault.sol:11",
        "version": {
          "withMetadata": "b8b100e32a94dedd8ec6406a39258f372ab4d0d839d04b090cba0005d3ba67cc",
          "withoutMetadata": "34d970c3c3757e2db3c7dafcc1f0f0e5ec06a26c84ffa0e238f2ce1c177e097a",
          "linkedWithoutMetadata": "34d970c3c3757e2db3c7dafcc1f0f0e5ec06a26c84ffa0e238f2ce1c177e097a"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/utils/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/AccessControl.sol:AccessControl",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/vaults/IVault.sol:IVault"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "(address,address,string)",
          "deposit(address,uint256)",
          "withdraw(address,uint256)",
          "totalAssets()",
          "balanceOf(address)",
          "harvest()",
          "sharePrice()",
          "getVaultInfo()",
          "addRWAAsset(string,uint256,string)",
          "updateRWAAssetValue(string,uint256)",
          "setAPY(uint256)",
          "getRWAAsset(string)",
          "getAssetCount()",
          "emergencyWithdraw(address)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RWAVault",
            "src": "contracts/vaults/RWAVault.sol:50"
          },
          {
            "kind": "state-variable-immutable",
            "name": "asset",
            "src": "contracts/vaults/RWAVault.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)1700_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "1",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/utils/Pausable.sol:18"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            },
            {
              "label": "totalShares",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "RWAVault",
              "src": "contracts/vaults/RWAVault.sol:19"
            },
            {
              "label": "totalAssetValue",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "RWAVault",
              "src": "contracts/vaults/RWAVault.sol:20"
            },
            {
              "label": "lastUpdateTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "RWAVault",
              "src": "contracts/vaults/RWAVault.sol:21"
            },
            {
              "label": "currentAPY",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "RWAVault",
              "src": "contracts/vaults/RWAVault.sol:22"
            },
            {
              "label": "shares",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "RWAVault",
              "src": "contracts/vaults/RWAVault.sol:24"
            },
            {
              "label": "rwaAssets",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_string_memory_ptr,t_struct(RWAAsset)16301_storage)",
              "contract": "RWAVault",
              "src": "contracts/vaults/RWAVault.sol:27"
            },
            {
              "label": "assetIds",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_string_storage)dyn_storage",
              "contract": "RWAVault",
              "src": "contracts/vaults/RWAVault.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1700_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_string_memory_ptr,t_struct(RWAAsset)16301_storage)": {
              "label": "mapping(string => struct RWAVault.RWAAsset)",
              "numberOfBytes": "32"
            },
            "t_string_memory_ptr": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RWAAsset)16301_storage": {
              "label": "struct RWAVault.RWAAsset",
              "members": [
                {
                  "label": "value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "purchasePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "yield",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "assetType",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(RoleData)1700_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      }
    }
  ]
}